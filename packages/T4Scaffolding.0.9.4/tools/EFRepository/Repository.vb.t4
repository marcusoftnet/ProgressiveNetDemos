<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="vb" #>
Imports System.Data.Entity
Imports System.Linq.Expressions
<# if((!string.IsNullOrEmpty(Model.ModelTypeNamespace)) && (Model.ModelTypeNamespace != Model.RepositoryNamespace)) { #>
Imports <#= Model.ModelTypeNamespace #>
<# } #>

<#= T4Scaffolding.Namespaces.BeginVb(Model.RepositoryNamespace, Model.DefaultNamespace) #>
<# var modelType = (CodeType)Model.ModelType; var modelName = modelType.Name; var modelNamePlural = Model.ModelTypePluralized; var contextName = Model.DbContextType; #>
    Public Class <#= modelName #>Repository : Implements I<#= modelName #>Repository
        Private context As <#= contextName #> = New <#= contextName #>()

        Public Function GetAll<#= modelNamePlural #>(ByVal ParamArray includeProperties() As Expression(Of Func(Of <#= modelName #>, Object))) As IEnumerable(Of <#= modelName #>) Implements I<#= modelName #>Repository.GetAll<#= modelNamePlural #>
			Dim query As IQueryable(Of <#= modelName #>) = context.<#= modelNamePlural #>
			For Each includeProperty In includeProperties
				query = query.Include(includeProperty)
			Next
			Return query.ToList()
        End Function

        Public Function GetById(id As Integer) As <#= modelName #> Implements I<#= modelName #>Repository.GetById
            Return context.<#= modelNamePlural #>.Find(id)
        End Function

        Public Sub InsertOrUpdate(<#= modelName.ToLower() #> As <#= modelName #>) Implements I<#= modelName #>Repository.InsertOrUpdate
            context.<#= modelNamePlural #>.Add(<#= modelName.ToLower() #>)
			If <#= modelName.ToLower() #>.<#= Model.PrimaryKey #> = 0 Then
				' New entity
				context.<#= modelNamePlural #>.Add(<#= modelName.ToLower() #>)
			Else
				' Existing entity
				context.<#= modelNamePlural #>.Attach(<#= modelName.ToLower() #>)
                context.Entry(<#= modelName.ToLower() #>).State = EntityState.Modified
			End If
        End Sub

        Public Sub Delete(id As Integer) Implements I<#= modelName #>Repository.Delete
            Dim <#= modelName.ToLower() #> = context.<#= modelNamePlural #>.Find(id)
            context.<#= modelNamePlural #>.Remove(<#= modelName.ToLower() #>)
        End Sub

        Public Sub Save() Implements I<#= modelName #>Repository.Save
            context.SaveChanges()
        End Sub
    End Class

	Public Interface I<#= modelName #>Repository
        Function GetAll<#= modelNamePlural #>(ByVal ParamArray includeProperties() As Expression(Of Func(Of <#= modelName #>, Object))) As IEnumerable(Of <#= modelName #>)
		Function GetById(id As Integer) As <#= modelName #>
		Sub InsertOrUpdate(<#= modelName.ToLower() #> As <#= modelName #>)
        Sub Delete(id As Integer)
        Sub Save()
    End Interface
<#= T4Scaffolding.Namespaces.EndVb(Model.RepositoryNamespace, Model.DefaultNamespace) #>